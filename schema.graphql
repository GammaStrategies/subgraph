type Protocol @entity(immutable: true) {
  "Hypervisor registry address"
  id: String!
  "Name of protocol"
  slug: String!
  name: String!
  "Underlying infrastructure protocol"
  underlyingProtocol: String!
  "Network/chain"
  network: String!
  "Subgraph version"
  version: String!
}

type ProtocolDistribution @entity {
  "Address of distributed token"
  id: ID!
  "Cumulative distributed amount"
  distributed: BigInt!
  "Cumulative distributed amount in USD at the time of distribution"
  distributedUSD: BigDecimal!
}

type RewardHypervisor @entity {
  id: ID!
  "Total GAMMA staked in the reward hypervisor"
  totalGamma: BigInt!
  "Total supply of XGAMMA"
  totalSupply: BigInt!
  "XGAMMA shares held by stakers"
  shares: [RewardHypervisorShare!]! @derivedFrom(field: "rewardHypervisor")
}

type RewardHypervisorShare @entity {
  id: ID!
  account: Account!
  rewardHypervisor: RewardHypervisor!
  shares: BigInt!
}

type RewardHypervisorTx @entity {
  id: ID!
  block: BigInt!
  timestamp: BigInt!
  "stake or unstake"
  action: String!
  account: Account!
  gammaAmount: BigInt!
  xgammaAmount: BigInt!
  xgammaAmountBefore: BigInt!
  xgammaAmountAfter: BigInt!
  xgammaSupplyBefore: BigInt!
  xgammaSupplyAfter: BigInt!
}

type DistributionDayData @entity {
  id: ID!
  date: BigInt!
  timezone: String!
  token: Token!
  distributed: BigInt!
  distributedUSD: BigDecimal!
}

type RewardHypervisorDayData @entity {
  id: ID!
  date: BigInt!
  timezone: String!
  totalGamma: BigInt!
  totalSupply: BigInt!
}

type Factory @entity {
  id: ID!
  owner: Bytes!
}

type Hypervisor @entity {
  id: ID!
  owner: Bytes!
  stakingToken: Token!
  totalStakedAmount: BigInt
  rewardToken: Token!
  rewardPool: Bytes
  rewardPoolAmount: BigInt
  powerSwitch: Bytes
  bonusTokens: [Bytes!]
  vaultFactory: Factory
}

"Each account is an address, this can either be an normal wallet or a visor vault"
type Account @entity {
  id: ID!
  type: String!
  parent: User!
  gammaDeposited: BigInt!
  gammaEarnedRealized: BigInt!
  rewardHypervisorShares: [RewardHypervisorShare!]!
    @derivedFrom(field: "account")
  hypervisorCount: BigInt!
  hypervisorShares: [UniswapV3HypervisorShare!]! @derivedFrom(field: "account")
  mcPoolAccounts: [MasterChefPoolAccount!]! @derivedFrom(field: "account")
  mcv2PoolAccounts: [MasterChefV2PoolAccount!]! @derivedFrom(field: "account")
  mcv2RewarderPoolAccounts: [MasterChefV2RewarderPoolAccount!]!
    @derivedFrom(field: "account")
}

type VisorTemplate @entity {
  id: ID!
  address: Bytes!
  active: Boolean!
}

type User @entity {
  id: ID!
  activeAccount: Account!
  accountsOwned: [Account!] @derivedFrom(field: "parent") # Visors owned by this user
}

type StakedToken @entity {
  id: ID! # Vault address-Token address
  token: Token!
  account: Account!
  amount: BigInt!
}

type RewardedToken @entity {
  id: ID! # Vault address-Token address
  token: Token!
  account: Account!
  amount: BigInt!
}

type Token @entity {
  # token address
  id: ID!
  # token symbol
  symbol: String!
  # token name
  name: String!
  # token decimals
  decimals: Int!
  totalSupply: BigInt!
}

type UniswapV3Pool @entity {
  # Pool address
  id: ID!
  token0: Token!
  token1: Token!
  # Fee tier: 50, 3000, 10000
  fee: Int!
  sqrtPriceX96: BigInt!
  tick: Int!
  hypervisors: [String!]!
  lastSwapTime: BigInt!
  lastHypervisorRefreshTime: BigInt!
}

type UniswapV3HypervisorFactory @entity {
  # Hypervisor address
  id: ID!
  # Number of hypervisors created by factory
  hypervisorCount: BigInt!
  # Cumulative fees claimed by hypervisors from Uniswap
  grossFeesClaimedUSD: BigDecimal!
  # Cumulative fees collected by protocol from hypervisors
  protocolFeesCollectedUSD: BigDecimal!
  # Cumulative fees reinvested into pools by hypervisors
  feesReinvestedUSD: BigDecimal!
  # TVL of all hypervisors under one factory
  tvlUSD: BigDecimal!
  hypervisors: [UniswapV3Hypervisor!]! @derivedFrom(field: "factory")
}

type UniswapV3Hypervisor @entity {
  # Hypervisor address
  id: ID!
  factory: UniswapV3HypervisorFactory!
  version: String!
  owner: Bytes!
  created: Int!
  symbol: String!
  pool: UniswapV3Pool!
  fee: Int!
  tick: Int!
  # Lower tick of base position
  baseLower: Int!
  # Upper tick of base position
  baseUpper: Int!
  baseLiquidity: BigInt!
  baseAmount0: BigInt!
  baseAmount1: BigInt!
  baseTokensOwed0: BigInt!
  baseTokensOwed1: BigInt!
  baseFeeGrowthInside0LastX128: BigInt!
  baseFeeGrowthInside1LastX128: BigInt!
  baseFeeGrowthInside0LastRebalanceX128: BigInt!
  baseFeeGrowthInside1LastRebalanceX128: BigInt!
  # Lower tick of limit position
  limitLower: Int!
  # Upper tick of limit position
  limitUpper: Int!
  # All time Gross Fees claimed
  limitLiquidity: BigInt!
  limitAmount0: BigInt!
  limitAmount1: BigInt!
  limitTokensOwed0: BigInt!
  limitTokensOwed1: BigInt!
  limitFeeGrowthInside0LastX128: BigInt!
  limitFeeGrowthInside1LastX128: BigInt!
  limitFeeGrowthInside0LastRebalanceX128: BigInt!
  limitFeeGrowthInside1LastRebalanceX128: BigInt!
  deposit0Max: BigInt!
  deposit1Max: BigInt!
  totalSupply: BigInt!
  maxTotalSupply: BigInt!
  grossFeesClaimed0: BigInt!
  grossFeesClaimed1: BigInt!
  grossFeesClaimedUSD: BigDecimal!
  # All time Protocol fees for GAMMA buyback
  protocolFeesCollected0: BigInt!
  protocolFeesCollected1: BigInt!
  protocolFeesCollectedUSD: BigDecimal!
  # All time Gross fees minus protocol fees
  feesReinvested0: BigInt!
  feesReinvested1: BigInt!
  feesReinvestedUSD: BigDecimal!
  tvl0: BigInt!
  tvl1: BigInt!
  tvlUSD: BigDecimal!
  pricePerShare: BigDecimal!
  conversion: UniswapV3HypervisorConversion!
  # Number of visors deposited into hypervisor
  accountCount: BigInt!
  deposits: [UniswapV3Deposit!]! @derivedFrom(field: "hypervisor")
  rebalances: [UniswapV3Rebalance!]! @derivedFrom(field: "hypervisor")
  withdraws: [UniswapV3Withdraw!]! @derivedFrom(field: "hypervisor")
  dayData: [UniswapV3HypervisorDayData!]! @derivedFrom(field: "hypervisor")
  feeUpdates: [UniswapV3FeeUpdate!]! @derivedFrom(field: "hypervisor")
  lastUpdated: BigInt!
  active: Boolean!
}

type UniswapV3Deposit @entity {
  id: ID!
  hypervisor: UniswapV3Hypervisor!
  block: BigInt!
  timestamp: BigInt!
  sender: Bytes!
  to: Bytes!
  shares: BigInt!
  amount0: BigInt!
  amount1: BigInt!
  amountUSD: BigDecimal!
}

type UniswapV3Rebalance @entity {
  id: ID!
  hypervisor: UniswapV3Hypervisor!
  block: BigInt!
  timestamp: BigInt!
  tick: Int!
  baseLower: Int!
  baseUpper: Int!
  baseLiquidity: BigInt!
  baseAmount0: BigInt!
  baseAmount1: BigInt!
  limitLower: Int!
  limitUpper: Int!
  limitLiquidity: BigInt!
  limitAmount0: BigInt!
  limitAmount1: BigInt!
  totalAmount0: BigInt!
  totalAmount1: BigInt!
  totalAmountUSD: BigDecimal!
  grossFees0: BigInt!
  grossFees1: BigInt!
  grossFeesUSD: BigDecimal!
  protocolFees0: BigInt!
  protocolFees1: BigInt!
  protocolFeesUSD: BigDecimal!
  netFees0: BigInt!
  netFees1: BigInt!
  netFeesUSD: BigDecimal!
  totalSupply: BigInt!
}

type UniswapV3Withdraw @entity {
  id: ID!
  hypervisor: UniswapV3Hypervisor!
  block: BigInt!
  timestamp: BigInt!
  sender: Bytes!
  to: Bytes!
  shares: BigInt!
  amount0: BigInt!
  amount1: BigInt!
  amountUSD: BigDecimal!
}

# This entity is used to label blocks where Fee is collected
type UniswapV3FeeUpdate @entity {
  # hypervisorAddress-block
  id: ID!
  hypervisor: UniswapV3Hypervisor!
  block: BigInt!
  timestamp: BigInt!
  fees0: BigInt!
  fees1: BigInt!
  feesUSD: BigDecimal!
}

type UniswapV3HypervisorDayData @entity {
  id: ID!
  date: BigInt!
  hypervisor: UniswapV3Hypervisor!
  # Deposits for the day
  deposited0: BigInt!
  deposited1: BigInt!
  depositedUSD: BigDecimal!
  # withdraws for the day
  withdrawn0: BigInt!
  withdrawn1: BigInt!
  withdrawnUSD: BigDecimal!
  # Gross Fees claimed for the day
  grossFeesClaimed0: BigInt!
  grossFeesClaimed1: BigInt!
  grossFeesClaimedUSD: BigDecimal!
  # Protocol fees for GAMMA buyback for the day
  protocolFeesCollected0: BigInt!
  protocolFeesCollected1: BigInt!
  protocolFeesCollectedUSD: BigDecimal!
  # Gross fees minus protocol fees for the day
  feesReinvested0: BigInt!
  feesReinvested1: BigInt!
  feesReinvestedUSD: BigDecimal!
  totalSupply: BigInt!
  # Last TVL for the day
  tvl0: BigInt!
  tvl1: BigInt!
  tvlUSD: BigDecimal!
  open: BigDecimal!
  high: BigDecimal!
  low: BigDecimal!
  close: BigDecimal!
}

type UniswapV3HypervisorShare @entity {
  id: ID! # HypervisorAddress-VisorAddress
  account: Account!
  hypervisor: UniswapV3Hypervisor!
  shares: BigInt!
  initialToken0: BigInt!
  initialToken1: BigInt!
  initialUSD: BigDecimal!
}

type UniswapV3HypervisorConversion @entity {
  # Hypervisor ID
  id: ID!
  hypervisor: UniswapV3Hypervisor!
  # Whether the base token token0 or token1
  baseTokenIndex: Int!
  # The base token
  baseToken: Token!
  # The path of uniswap V3 pools for calculating USD value
  usdPath: [String!]!
  # Whether the USD token in usdPool is token0 or token1
  usdPathIndex: [Int!]!
  usdPathStartBlock: [Int!]!
  priceTokenInBase: BigDecimal!
  priceBaseInUSD: BigDecimal!
}

type MasterChef @entity {
  id: ID!
  rewardToken: Token!
  rewardPerBlock: BigInt!
  totalAllocPoint: BigInt!
  pools: [MasterChefPool!]! @derivedFrom(field: "masterChef")
}

type MasterChefPool @entity {
  id: ID!
  hypervisor: UniswapV3Hypervisor!
  masterChef: MasterChef!
  poolId: BigInt!
  allocPoint: BigInt!
  lastRewardBlock: BigInt!
  stakeToken: Token!
  totalStaked: BigInt!
  accounts: [MasterChefPoolAccount!]! @derivedFrom(field: "masterChefPool")
}

type MasterChefPoolAccount @entity {
  id: ID!
  account: Account!
  masterChefPool: MasterChefPool!
  amount: BigInt!
}

type MasterChefV2 @entity {
  id: ID!
  rewardToken: Token!
  rewardPerSecond: BigInt!
  totalAllocPoint: BigInt!
  pools: [MasterChefV2Pool!]! @derivedFrom(field: "masterChef")
}

# Pools related to MasterChef V2
type MasterChefV2Pool @entity {
  #Hypervisor ID
  id: ID!
  hypervisor: UniswapV3Hypervisor!
  masterChef: MasterChefV2!
  poolId: BigInt!
  allocPoint: BigInt!
  stakeToken: Token!
  totalStaked: BigInt!
  accSushiPerShare: BigInt!
  lastRewardTimestamp: BigInt!
  rewarderList: [String!]!
  rewarders: [MasterChefV2RewarderPool!]! @derivedFrom(field: "pool")
  accounts: [MasterChefV2PoolAccount!]! @derivedFrom(field: "pool")
}

# Rewarders related to MasterChef V2
type MasterChefV2Rewarder @entity {
  # Rewarder contract ID
  id: ID!
  masterChef: MasterChefV2!
  rewardToken: Token!
  rewardPerSecond: BigInt!
  totalAllocPoint: BigInt!
  lastRewardTimestamp: BigInt!
  pools: [MasterChefV2RewarderPool!]! @derivedFrom(field: "rewarder")
}

type MasterChefV2RewarderPool @entity {
  # Rewarder ID - Pool ID
  id: ID!
  rewarder: MasterChefV2Rewarder!
  pool: MasterChefV2Pool!
  allocPoint: BigInt!
  accounts: [MasterChefV2RewarderPoolAccount!]!
    @derivedFrom(field: "rewarderPool")
}

type MasterChefV2PoolAccount @entity {
  # Pool ID - Account ID
  id: ID!
  account: Account!
  pool: MasterChefV2Pool!
  amount: BigInt!
}

type MasterChefV2RewarderPoolAccount @entity {
  id: ID!
  account: Account!
  rewarderPool: MasterChefV2RewarderPool!
  amount: BigInt!
}

type _PoolQueue @entity {
  id: ID!
  addresses: [String!]!
  startBlocks: [BigInt!]!
}
